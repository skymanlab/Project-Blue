package com.skyman.billiarddata.fragment.statistics;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.DialogFragment;import androidx.fragment.app.Fragment;import com.applandeo.materialcalendarview.CalendarView;import com.applandeo.materialcalendarview.EventDay;import com.applandeo.materialcalendarview.listeners.OnDayClickListener;import com.skyman.billiarddata.R;import com.skyman.billiarddata.developer.DeveloperLog;import com.skyman.billiarddata.developer.LogSwitch;import com.skyman.billiarddata.dialog.GameInfoDialog;import com.skyman.billiarddata.etc.SectionManager;import com.skyman.billiarddata.etc.calendar.DrawableUtil;import com.skyman.billiarddata.etc.calendar.SameDateGame;import com.skyman.billiarddata.etc.game.Date;import com.skyman.billiarddata.table.billiard.data.BilliardData;import com.skyman.billiarddata.table.user.data.UserData;import java.io.Serializable;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;/** * A simple {@link Fragment} subclass. * Use the {@link CalendarFragment#newInstance} factory method to * create an instance of this fragment. */public class CalendarFragment extends Fragment implements SectionManager.Initializable {    // constant    private static final LogSwitch CLASS_LOG_SWITCH = LogSwitch.OFF;    private static final String CLASS_NAME = "CalendarFragment";    // constant    private static final String USER_DATA = "userData";    private static final String BILLIARD_DATA_LIST = "billiardDataList";    private static final String SAME_DATE_GAME_LIST = "sameDateGameList";    // instance variable    private UserData userData;    private ArrayList<BilliardData> billiardDataList;    private HashMap<String, SameDateGame> sameDateGameList;    // instance variable    private CalendarView calendarView;    // constructor    public CalendarFragment() {        // Required empty public constructor    }    /**     * Use this factory method to create a new instance of     * this fragment using the provided parameters.     *     * @return A new instance of fragment CalendarFragment.     */    // TODO: Rename and change types and number of parameters    public static CalendarFragment newInstance(UserData userData,                                               List<BilliardData> billiardDataList,                                               Map<String, SameDateGame> sameDateGameList) {        Bundle args = new Bundle();        args.putSerializable(USER_DATA, userData);        args.putSerializable(BILLIARD_DATA_LIST, (Serializable) billiardDataList);        args.putSerializable(SAME_DATE_GAME_LIST, (Serializable) sameDateGameList);        CalendarFragment fragment = new CalendarFragment();        fragment.setArguments(args);        return fragment;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            userData = (UserData) getArguments().getSerializable(USER_DATA);            billiardDataList = (ArrayList<BilliardData>) getArguments().getSerializable(BILLIARD_DATA_LIST);            sameDateGameList = (LinkedHashMap<String, SameDateGame>) getArguments().getSerializable(SAME_DATE_GAME_LIST);        }    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        // Inflate the layout for this fragment        return inflater.inflate(R.layout.fragment_calendar, container, false);    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        // widget : connect -> init        connectWidget();        initWidget();    }    @Override    public void initAppDbManager() {    }    @Override    public void connectWidget() {        this.calendarView = (CalendarView) getView().findViewById(R.id.F_calendar_calendarView_displayGameRecord);    }    @Override    public void initWidget() {        // <1> 사용자 등록 확인        if ((this.userData != null)) {            // <2> 등록된 게임 정보 확인            if (!this.billiardDataList.isEmpty()) {                // <3> 같은 날짜 게임 리스트 확인                if (this.sameDateGameList != null) {                    // <4> sameDateGameList 를 사용하여 모든 날짜에 대한 EventDay 객체 적용                    calendarView.setEvents(createEventDayList());                }            }        }        this.calendarView.setOnDayClickListener(new OnDayClickListener() {            @Override            public void onDayClick(EventDay eventDay) {                onDayClickOfCalendarView(eventDay);            }        });    }    private void onDayClickOfCalendarView(EventDay eventDay) {        // sameDateGameList 가 없다면 클릭해도 표시할 '게임 정보 dialog'가 없음        if (sameDateGameList == null)            return;        if (sameDateGameList.isEmpty())            return;        // 클릭된 날짜에 해당하는 sameDateGame 객체가 있는지 sameDateGameList 에서 찾기        SameDateGame sameDateGame1 = sameDateGameList.get(                new Date(                        eventDay.getCalendar().getWeekYear(),                        eventDay.getCalendar().getTime().getMonth() + 1,                        eventDay.getCalendar().getTime().getDate()                ).toString()        );        // 만약 없다면 Dialog 띄울 필요 없음        if (sameDateGame1 == null)            return;        // 만약 있다면 Di        GameInfoDialog dialog = GameInfoDialog.newInstance(                sameDateGame1,                billiardDataList        );        dialog.setStyle(                DialogFragment.STYLE_NO_TITLE,                android.R.style.Theme_DeviceDefault_Light_NoActionBar_Fullscreen        );        dialog.show(                getParentFragmentManager(),                GameInfoDialog.class.getSimpleName()        );    }  private ArrayList<EventDay> createEventDayList() {        ArrayList<EventDay> eventDayList = new ArrayList<>();        sameDateGameList.forEach(                (date, sameDateGame1) ->                        eventDayList.add(newInstance(sameDateGame1))        );        return eventDayList;    }    private EventDay newInstance(SameDateGame sameDateGame) {        return new EventDay(                newInstance(sameDateGame.getDate()),                DrawableUtil.newInstanceByType(                        getContext(),                        sameDateGame.getRecord()                )        );    }    private Calendar newInstance(Date date) {        Calendar calendar = Calendar.getInstance();        calendar.set(date.getYear(), date.getMonth() - 1, date.getDayOfMonth());        DeveloperLog.printLog(CLASS_LOG_SWITCH, CLASS_NAME, "calendar : " + calendar.getTime().toString());        return calendar;    }}